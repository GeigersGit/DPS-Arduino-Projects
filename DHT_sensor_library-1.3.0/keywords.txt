//Arduino Interpreter
//Brian Geiger
//9/14/2017

#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <EEPROM.h>

#define VERSION 0.09

#define tON 1 //0N
#define tOF 2 //OF
#define tSL 3 //SLOW
#define tME 4 //MEDIUM
#define tFA 5 //FAST
#define tBL 6 //BLINK
#define tMO 7 //MOTOR
#define tLE 8 //LED
#define tSP 9 //SPEED
#define tRE 10 //RED
#define tGR 11 //GREEN
#define tYE 12 //YELLOW
#define tAD 13 //ADD
#define tVE 14 //VERSION
#define tST 15 //STATUS
#define tTE 16 //TEMP
#define tHU 17 //HUMIDITY
#define tHI 18 //HIGH
#define tLO 19 //LOW
#define tQU 20 //QUESTION MARK
#define tER 21 //ERASE HISTORY LOG

#define tERR 0x7E //PARSE ERROR
#define tEOL 0x7F //END OF LINE 

#define BOARD_LED_PIN 13 
#define EXT_LED_PIN_CATHODE 3 //RED IF HIGH
#define EXT_LED_PIN_ANODE 4  //GREEN IF HIGH
#define DHT_PIN 2 //Temperature and Humidity Sensor

#define EEPROM_LATEST_ENTRY_ADDR  0 //And 1 because we are storing an int

byte TOKS[] = {
  'o','n',tON, //ON
  'o','f',tOF, //OFF
  'f','\0',tOF, //OFF 
  's','l',tSL, //SLOW
  'm','e',tME, //MEDIUM
  'f','a',tFA, //FAST
  'b','l',tBL, //BLINK
  'm','o',tMO, //MOTOR
  'l','e',tLE, //LED
  's','p',tSP, //SPEED
  'r','\0',tRE, //RED
  'g','\0',tGR, //GREEN
  'y','\0',tYE, //YELLOW
  'a','d',tAD, //ADD
  'v','e',tVE, //VERSION
  's','t',tST, //STATUS
  't','e',tTE, //TEMP
  'h','u',tHU, //HUMIDITY
  'h','i',tHI, //HIGH
  'l','o',tLO, //LOW
  '?','\0',tQU, //QUESTION 
  'e','r',tER, //ERASE HISTORY LOG
  '\0'
};

//Parse specific variables
char inputBuffer[30] = {'\0'};
byte tokenBuffer[10] = {'\0'};
byte tokenStart = 0;
byte tokenEnd = 0;
byte currentToken = 0;
byte phase = 0;
byte nextByte;
int i = 0;

//LED specific variables
byte ledCycle = 0b11111111;
unsigned long ledTimeStamp = 1000;
int ledSpeed = 1000;

//DHT specific variables
DHT_Unified dht(DHT_PIN, DHT22);
unsigned long fiveSecondDHTTimeStamp = 5000;
unsigned long fifteenMinuteDHTTimeStamp = 60000;
byte curTemperature = 0;
byte curHumidity = 0;
int eepromAddr = 2;
byte temp = 0;
int tempAddr = 0;
int count;

//Update current temp every five seconds
//Update logged temp every 15 minutes
void dhtStateMachine(){
  
  if(millis() > fiveSecondDHTTimeStamp){
    sensors_event_t event; 
     
    dht.temperature().getEvent(&event);
    curTemperature = event.temperature;
    
    dht.humidity().getEvent(&event);
    curHumidity = event.relative_humidity;
    
    fiveSecondDHTTimeStamp = millis() + 5000;    
  }
  
  if(millis() > fifteenMinuteDHTTimeStamp){
    
    EEPROM.write(eepromAddr, curTemperature);
    eepromAddr++; if(eepromAddr == EEPROM.length()) {eepromAddr = 2;}
    EEPROM.put(EEPROM_LATEST_ENTRY_ADDR, eepromAddr);
    
    EEPROM.write(eepromAddr, curHumidity);
    eepromAddr++; if(eepromAddr == EEPROM.length()) {eepromAddr = 2;}
    EEPROM.put(EEPROM_LATEST_ENTRY_ADDR, eepromAddr);
    
    while(Serial.available() > 0){
      Serial.read();
    }
    Serial.println("Wrote to EEPROM");
    fifteenMinuteDHTTimeStamp = millis() + 60000; 
       
  }
}

//Last two bites of ledCycle byte drive output pins
//Byte is rotated left twice every 1000ms or as dictated by led blink speed
void ledStateMachine(){

  if(millis() > ledTimeStamp){
    (ledCycle & (1 << 7)) ? (digitalWrite(EXT_LED_PIN_CATHODE, HIGH)) : (digitalWrite(EXT_LED_PIN_CATHODE, LOW)); 
    (ledCycle & (1 << 6)) ? (digitalWrite(EXT_LED_PIN_ANODE, HIGH)) : (digitalWrite(EXT_LED_PIN_ANODE, LOW));
    if(!(ledCycle & (1 << 7)) != !(ledCycle & (1 << 6)))
      (digitalWrite(BOARD_LED_PIN, HIGH));
    else
      (digitalWrite(BOARD_LED_PIN, LOW));

    if(!(ledCycle & (1<<7)) && !(ledCycle & (1<<6))) {Serial.println("WARNING BOTH LOW");}

    ledTimeStamp = millis() + ledSpeed;
    ledCycle = rotateByteLeft(rotateByteLeft(ledCycle));
  }
}

//Collect keyboard input, lowercase any uppercase letters and assign chars one at a time to the input buffer
void getKeyboardInput(){
  
  if(Serial.available() > 0) {
    nextByte = Serial.read();
    if(nextByte == '\r') {
      inputBuffer[i + 1] = '\0';
      Serial.println(inputBuffer);
      Serial.println();
      phase++;
    }
    else{
      if(nextByte >= 'A' && nextByte <= 'Z') {nextByte += 32;}
      inputBuffer[i] = nextByte;
      i++;
    }
  }
}

//get start and ending locations of tokens, verify them, and add their token IDs to the token buffer
void parseTokens(){
  
  tokenStart = 0;
  tokenEnd = 0;
  while(true) {
    
    while(inputBuffer[tokenStart] == ' ') {
      tokenStart++;
    }
    tokenEnd = tokenStart;
    while(inputBuffer[tokenEnd] != ' ' && inputBuffer[tokenEnd] != '\r' && inputBuffer[tokenEnd] != '\0') {
      tokenEnd++;
    }
    tokenEnd--;
 
    tokenize(tokenStart,tokenEnd,inputBuffer);
      
    //Set both indecies to just after word
    tokenEnd++;
    tokenStart = tokenEnd;
    
    //Append EOF token and exit at the end of the buffer
    if(inputBuffer[tokenEnd] == '\0' || inputBuffer[tokenEnd] == '\r'){
      Serial.print("<EOL> "); Serial.println(tEOL); Serial.println();
      tokenBuffer[currentToken] = tEOL;
      currentToken++;
      break;
    }
  }
  phase++;
}

//Match list of tokens with command patterns and execute any that match
void executeCommand(){
  
  //Check for parse errors
  for(i = 0; tokenBuffer[i] != tEOL; i++){
    if(tokenBuffer[i] == tERR){
      Serial.println("Command not recognized");
      reset();
      return;
    }
  }
  i = 0;

  //LED COMMANDS
  if(tokenBuffer[0] == tLE){
    
    //OFF
    if(tokenBuffer[1] == tOF && tokenBuffer[2] == tEOL){
        
      Serial.println("LED is now OFF");
      ledSpeed = 1000;
      ledCycle = 0b11111111;
    }
    
    //SOLID GREEN
    else if((tokenBuffer[1] == tGR && tokenBuffer[2] == tEOL) ||
            (tokenBuffer[1] == tON && tokenBuffer[2] == tGR && tokenBuffer[3] == tEOL)){
        
      Serial.println("LED is now GREEN");
      ledSpeed = 1000;
      ledCycle = 0b01010101;   
    }
    
    //SOLID YELLOW
    else if((tokenBuffer[1] == tYE && tokenBuffer[2] == tEOL) ||
            (tokenBuffer[1] == tON && tokenBuffer[2] == tYE && tokenBuffer[3] == tEOL)){
        
      Serial.println("LED is now YELLOW");
      ledSpeed = 1;
      ledCycle = 0b01100110;  
    }
    
    //SOLID RED
    else if((tokenBuffer[1] == tON && tokenBuffer[2] == tEOL) ||
            (tokenBuffer[1] == tRE && tokenBuffer[2] == tEOL) ||
            (tokenBuffer[1] == tON && tokenBuffer[2] == tRE && tokenBuffer[3] == tEOL)){
        
      Serial.println("LED is now RED");
      ledSpeed = 1000;
      ledCycle = 0b10101010;
    }
    
    //BLINKING GREEN
    else if((tokenBuffer[1] == tBL && tokenBuffer[2] == tGR && tokenBuffer[3] == tEOL)){
        
      Serial.println("LED is now BLINKING GREEN");
      ledSpeed = 1000;
      ledCycle = 0b01110111;
    }
    
    //BLINKING RED
    else if((tokenBuffer[1] == tBL && tokenBuffer[2] == tEOL) ||
            (tokenBuffer[1] == tBL && tokenBuffer[2] == tRE && tokenBuffer[3] == tEOL)){
        
      Serial.println("LED is now BLINKING RED");
      ledSpeed = 1000;
      ledCycle = 0b10111011;  
    }
    
    //STATUS
    else if(tokenBuffer[1] == tST){
      
      //Return if tokens 2 - 5 aren't red, green, or off
      for(i = 2; i < 6; i++){
        if(tokenBuffer[6] != tEOL || 
        !(tokenBuffer[i] == tRE || tokenBuffer[i] == tGR || tokenBuffer[i] == tOF)){
          Serial.println("Command not recognized");
          reset();
          return;
        }
      }
      //Read tokens 2, 3, 4, and 5 and assign them to 2 bits each based on color
      Serial.print("LED Status:");
      ledCycle = 0;
      for(i = 2; i < 6; i++){
        if(tokenBuffer[i] == tOF){
          Serial.print(" Off");
          ledCycle |= (1 << (9 - i - (i-2)));
          ledCycle |= (1 << (8 - i - (i-2)));
        }
        else if(tokenBuffer[i] == tRE){
          Serial.print(" Red");
          ledCycle |= (1 << (9 - i - (i-2)));
        }
        else if(tokenBuffer[i] == tGR){
          Serial.print(" Green");
          ledCycle |= (1 << (8 - i - (i-2)));
        }
      }
      Serial.println();
      ledSpeed = 1000;
      i = 0;
    }
    
    //BLINK SPEED
    else if(tokenBuffer[1] == tSP){
      
      //SLOW BLINK SPEED
      if(tokenBuffer[2] == tSL && tokenBuffer[3] == tEOL){
        ledSpeed = 1000;
        Serial.print("LED BLINKING SPEED: ");
        Serial.print(ledSpeed);
        Serial.println("ms");
      }
      
      //MEDIUM BLINK SPEED
      else if(tokenBuffer[2] == tME && tokenBuffer[3] == tEOL){
        ledSpeed = 500;
        Serial.print("LED BLINKING SPEED: ");
        Serial.print(ledSpeed);
        Serial.println("ms");
      }
      
      //FAST BLINK SPEED
      else if(tokenBuffer[2] == tFA && tokenBuffer[3] == tEOL){
        ledSpeed = 100;
        Serial.print("LED BLINKING SPEED: ");
        Serial.print(ledSpeed);
        Serial.println("ms");
      }
      
      //VARIABLE BLINK SPEED
      else if(tokenBuffer[2] > 127 && tokenBuffer[3] == tEOL){
        ledSpeed = ((tokenBuffer[i + 2] - 128) * 10);
        Serial.print("LED BLINKING SPEED: ");
        Serial.print(ledSpeed);
        Serial.println("ms");
      }
      else
        Serial.println("Command not recognized");
    }
    else
      Serial.println("Command not recognized");
  }
 
  //TEMPERATURE COMMANDS
  else if(tokenBuffer[0] == tTE){
    
    //CURRENT TEMPERATURE
    if(tokenBuffer[1] == tQU && tokenBuffer[2] == tEOL){
      Serial.print("Current Temperature is: ");
      Serial.print(curTemperature); Serial.println(" *C");
    }
    
    //HIGHEST TEMPERATURE
    else if(tokenBuffer[1] == tHI && tokenBuffer[2] == tEOL){
      temp = 0;
      tempAddr = 0;
      for(i = 2; i < EEPROM.length(); i+=2){
        if(EEPROM.read(i) >= temp){
          temp = EEPROM.read(i);
          tempAddr = i;
        }
      }
      while(tempAddr != eepromAddr){
        count += 1;
        tempAddr += 2;
        if(tempAddr == EEPROM.length()) {tempAddr = 2;}
      }
      Serial.print("The highest recorded temperature is: ");
      Serial.print(temp); Serial.print(" *C  : ");
      Serial.print(count * 15); Serial.println(" Minutes ago.");
      count = 0;
    }
    
    //LOWEST TEMPERATURE
    else if(tokenBuffer[1] == tLO && tokenBuffer[2] == tEOL){
      temp = 120;
      tempAddr = 0;
      for(i = 2; i < EEPROM.length(); i+=2){
        if(EEPROM.read(i) <= temp && EEPROM.read(i + 1) > 0){
          temp = EEPROM.read(i);
          tempAddr = i;
        }
      }
      while(tempAddr != eepromAddr){
        count += 1;
        tempAddr += 2;
        if(tempAddr == EEPROM.length()) {tempAddr = 2;}
      }
      Serial.print("The lowest recorded temperature is: ");
      Serial.print(temp); Serial.print(" *C  : "); 
      Serial.print(count * 15); Serial.println(" Minutes ago.");
      count = 0;
    }
    else
      Serial.println("Command not recognized");
  }
  
  //HUMIDITY COMMANDS
  else if(tokenBuffer[0] == tHU){
    
    //CURRENT HUMIDITY
    if(tokenBuffer[1] == tQU && tokenBuffer[2] == tEOL){
      Serial.print("Current Humidity is: ");
      Serial.print(curHumidity); Serial.println("%");
    }
    
    //HIGHEST HUMIDITY
    else if(tokenBuffer[1] == tHI && tokenBuffer[2] == tEOL){
      temp = 0;
      tempAddr = 0;
      for(i = 3; i < EEPROM.length(); i += 2){
        if(EEPROM.read(i) >= temp){
          temp = EEPROM.read(i);
          tempAddr = i;
        }
      }
      while(tempAddr != eepromAddr - 1){
        count += 1;
        tempAddr += 2;
        if(tempAddr >= EEPROM.length()) {tempAddr = 3;}
      }
      Serial.print("The highest recorded humidity is: ");
      Serial.print(temp); Serial.print("%  : ");
      Serial.print(count * 15); Serial.println(" Minutes ago.");
      count = 0;
    }
    
    //LOWEST HUMIDITY
    else if(tokenBuffer[1] == tLO && tokenBuffer[2] == tEOL){
      temp = 140;
      tempAddr = 0;
      for(i = 3; i < EEPROM.length(); i+=2){
        if(EEPROM.read(i) <= temp && EEPROM.read(i) > 0){
          temp = EEPROM.read(i);
          tempAddr = i;
        }
      } 
      while(tempAddr != eepromAddr - 1){
        count += 1;
        tempAddr += 2;
        if(tempAddr == EEPROM.length()) {tempAddr = 3;}
      }
      Serial.print("The lowest recorded humidity is: ");
      Serial.print(temp); Serial.print("%  : ");
      Serial.print(count * 15); Serial.println(" Minutes ago.");
      count = 0;
    }
    else
      Serial.println("Command not recognized");
  }

  //ERASE TEMPERATURE AND HUMIDITY LOG HISTORY
  else if(tokenBuffer[0] == tER){
    for(i = 0; i < EEPROM.length(); i++){
      EEPROM.put(i, '\0');
    }
    eepromAddr = 2;
    Serial.println("EEPROM Memory Erased");
  }
  
  //MOTOR COMMANDS
  else if(tokenBuffer[0] == tMO){
    
    //OFF
    if(tokenBuffer[1] == tOF && tokenBuffer[2] == tEOL){
      Serial.println("MOTOR is now OFF");
    }
    
    //VARIABLE SPEED
    else if(tokenBuffer[1] == tON && tokenBuffer[2] > 127 && tokenBuffer[3] == tEOL){
      Serial.print("MOTOR is now ON: ");
      Serial.println(tokenBuffer[i + 2] - 128);
    }
    
    //ON
    else if(tokenBuffer[1] == tON && tokenBuffer[2] == tEOL){
      Serial.println("MOTOR is now ON");
    }
    else
      Serial.println("Command not recognized");
  }
  
  //VERSION
  else if(tokenBuffer[0] == tVE && tokenBuffer[1] == tEOL){
    Serial.print("Arduino Interpreter v");
    Serial.println(VERSION);
    Serial.println("September 3, 2017");
    Serial.println("Brian Geiger");
  }
  
  //ADD
  else if(tokenBuffer[0] == tAD && tokenBuffer[1] > 127 && tokenBuffer[2] > 127 && tokenBuffer[3] == tEOL){
    Serial.print(tokenBuffer[1] - 128);
    Serial.print(" + ");
    Serial.print(tokenBuffer[2] - 128);
    Serial.print(" = ");
    Serial.println((tokenBuffer[1] - 128) + (tokenBuffer[2] - 128));
  }

  else
    Serial.println("Command not recognized");
  
  reset();
}
 
void tokenize(byte first, byte last, char buff[]) {
 
  //NUMBER
  if(buff[first] >= '0' && buff[first] <= '9') {
    //Throw out if it contains non-numerical characters
    for(i = first; i <= last; i++){
      if(buff[i] < '0' || buff[i] > '9'){
        Serial.print("<");
        for(i = first; i <= last; i++){
          Serial.print(buff[i]);
        }
        Serial.print("> ");
        Serial.print(tERR);
        Serial.print(" (Parse Error: Number Contains Non-Numbers)");
        Serial.println();
        tokenBuffer[currentToken] = tERR;
        currentToken++;
        return;
      }
    }
    //Convert string number to number value
    byte num = 0;
    for(i = first; i <= last; i++){
      num = (10 * num) + (buff[i] - '0');
    }
    //Throw out if larger than 127 or larger than 3 digits
    if(num > 127 || ((last - first + 1) > 3)){
      Serial.print("<");
      for(i = first; i <= last; i++){
        Serial.print(buff[i]);
      }
      Serial.print("> ");
      Serial.print(tERR);
      Serial.print(" (Parse Error: Number Too Large)");
      Serial.println();
      tokenBuffer[currentToken] = tERR;
      currentToken++;
    }
    //Else add 128 and add to token buffer
    else{
      Serial.print("<");
      Serial.print(num);
      Serial.print("> ");
      num += 128;
      Serial.print(num);
      Serial.println();
      tokenBuffer[currentToken] = num;
      currentToken++;
    }
  }

  //WORD
  else{
    //Match to library of words
    byte token = checkToken(first, last, buff);
    Serial.print("<");
    if(token != tERR){
      for(i = first; i <= last; i++){
        Serial.print(buff[i]);
      }
      Serial.print("> ");
      Serial.print(token);
    }
    else{
      for(i = first; i <= last; i++){
        Serial.print(buff[i]);
      }
      Serial.print("> ");
      Serial.print(token);
      Serial.print(" (Parse Error: Unexpected Token)");
    }
    Serial.println();
    tokenBuffer[currentToken] = token;
    currentToken++;
  }
}

//Compare input token to library of declared tokens
byte checkToken(byte first, byte last, char buff[]) {
  
  i = 0;
  while(TOKS[i] != '\0'){
    if(buff[first] == TOKS[i] && buff[first + 1] == TOKS[i + 1])
      return TOKS[i + 2];
    //case for single letter tokens
    else if(first == last && buff[first] == TOKS[i] && TOKS[i + 1] == '\0'){
      return TOKS[i + 2];
    }
    else
      i += 3;
  }
  return tERR;

};

void reset(){
  
  memset(tokenBuffer, '\0', sizeof(tokenBuffer));
  memset(inputBuffer, '\0', sizeof(inputBuffer));
  currentToken = 0;
  phase = 0;
  i = 0;
  tokenStart = 0;
  tokenEnd = 0;
  Serial.println("_");
  Serial.println();
}

byte rotateByteLeft(byte b){
  return(b & (1 << 7)) ? ((b <<= 1) |= 1) : (b <<= 1);
}

void setup() {
  
  Serial.begin(9600);
  pinMode(BOARD_LED_PIN, OUTPUT);
  pinMode(EXT_LED_PIN_CATHODE, OUTPUT);
  pinMode(EXT_LED_PIN_ANODE, OUTPUT);
  dht.begin();

  //Set the current write address to the one saved on EEPROM
  EEPROM.get(0, tempAddr);
  if(tempAddr == '\0'){
    eepromAddr = 2;
  }
  else{
    eepromAddr = tempAddr;
  }
  
  Serial.println("EEPROM Contents");
  for(i = 0; i < eepromAddr; i++){
    if(EEPROM.read(i) != 0){
      Serial.print(i); Serial.print(" : ");
      Serial.println(EEPROM.read(i));
    }  
  }
  while(Serial.available() > 0){
      Serial.read();
  }
}

void loop() {
  
  switch(phase) {
    case 0:
      getKeyboardInput();
    break;
    case 1:
      parseTokens();
    break;
    case 2:
      executeCommand();
    break;
  }
  
  ledStateMachine();

  dhtStateMachine();
}